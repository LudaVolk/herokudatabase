import telebot
from telebot import types
from dbhelper import DBHelper
import sqlite3

bot = telebot.TeleBot('5316835653:AAF7HRhti7HTxpCMEUGaFrVHdhQfaTK-iyE')

db = DBHelper()
user_data = {}


class Users:
    name: str
    surname: str
    phone: str
    classes: str

    def __init__(self, name, surname, phone, classes):
        self.name = name
        self.surname = surname
        self.phone = phone
        self.classes = classes

        db.db_table_name(name, surname, phone, classes)


@bot.message_handler(commands=['start'])
def welcome(message):
    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
    item2 = types.KeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫")
    item3 = types.KeyboardButton("–°—Ä–µ–¥–∞")
    item4 = types.KeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥")
    item5 = types.KeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞")
    item6 = types.KeyboardButton("–°—É–±–±–æ—Ç–∞")
    item7 = types.KeyboardButton("–ë–∞–∑–∞ –∑–∞–Ω—è—Ç–∏–π üîà")
    item8 = types.KeyboardButton("üëã–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç—è \n –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π")

    markup.add(item1, item2, item3, item4, item5, item6, item7, item8)

    bot.send_message(message.chat.id,
                     "Hi, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç-–î–Ω–µ–≤–Ω–∏–∫ –∑–∞–Ω—è—Ç–∏–π VL, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å!!!".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=['text'])
# @bot.message_handler(func=lambda message: db.db_table_val(user_id = message.from_user.id, user_name = message.from_user.first_name, user_surname = message.from_user.last_name, username = message.from_user.username))
# def lalala(message):
def lalala(message, db=DBHelper()):
    text = message.text.lower()
    print(text)
    if text in ['–ø—Ä–∏–≤–µ—Ç', 'hi', 'hello']:
        bot.send_message(message.chat.id, ' üôÇ –ü—Ä–∏–≤–µ—Ç! –í–∞—à–µ –∏–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')

        us_id = message.from_user.id
        us_name = message.from_user.first_name
        us_surname = message.from_user.last_name
        username = message.from_user.username

        db.db_table_val(us_id, us_name, us_surname, username)


    elif message.chat.type == 'private':
        if message.text == '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫':
            bot.send_message(message.chat.id, '–ü–∏–ª–∞—Ç–µ—Å Bok üèÉ‚Äç')
        if message.text == '–í—Ç–æ—Ä–Ω–∏–∫':
            bot.send_message(message.chat.id, '–ö—É—Ä—Å—ã BelHard üíª')
        if message.text == '–°—Ä–µ–¥–∞':
            bot.send_message(message.chat.id, u'–ü–∏–ª–∞—Ç–µ—Å Bok üèÉ‚Äç\n –ö–ª—É–± Book club üìó')
        if message.text == '–ß–µ—Ç–≤–µ—Ä–≥':
            bot.send_message(message.chat.id, '–ö—É—Ä—Å—ã Belhard üíª')
        if message.text == '–ü—è—Ç–Ω–∏—Ü–∞':
            bot.send_message(message.chat.id, '–°offee with friends ‚òï')
        if message.text == '–°—É–±–±–æ—Ç–∞':
            bot.send_message(message.chat.id, '–°ountry house üè†')
        if message.text == '–ë–∞–∑–∞ –∑–∞–Ω—è—Ç–∏–π üîà':
            bot.send_message(message.chat.id,
                             u'–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —Å—Ä–µ–¥–∞ –ü–∏–ª–∞—Ç–µ—Å Bok üìá\n –≤—Ç–æ—Ä–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥ Belhard üìâ\n —Å—Ä–µ–¥–∞ –ö–ª—É–± Book club üíª\n –ø—è—Ç–Ω–∏—Ü–∞ –ö–æ—Ñ–µ ‚òï\n —Å—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –°ountry house üî®')
        elif message.text == 'üëã–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç—è \n –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π':
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", callback_data='good')
            item21 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ", callback_data='bad')
            item22 = types.InlineKeyboardButton("‚ùì–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Ö—Å—è", callback_data='classes')
            item23 = types.InlineKeyboardButton("–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ –∑–∞–Ω—è—Ç–∏—é", callback_data='chat_id')
            item3 = types.InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data='exit')
            markup.add(item1, item21, item22, item23, item3)
            bot.send_message(message.chat.id, "–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π üí™üí™", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π—Ç–µ –±–æ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
            elif call.data == 'bad':
                msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è')
                bot.register_next_step_handler(msg, process_firstname_step)
            elif call.data == 'chat_id':
                msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ')
                bot.register_next_step_handler(msg, handler_chat)
                # bot.send_message(msg, text)
                # bot.send_message(chat_id, text)
                # bot.message_handler(msg, process_classes_step)
            elif call.data == 'classes':
                print("classes")
                itemst = db.get_items()
                print(itemst)
                if len(itemst) > 0:
                    for j in itemst:
                        s = ''
                        for k in j:
                            s = s + '  üëâ   ' + k
                        s = s + '    '
                        bot.send_message(call.message.chat.id, s)
                        print(j)

            elif call.data == 'correct_classes':
                print("=============")
                msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å')
                #user_id = call.message.from_user.id
                # user_id = msg.from_user.id
                # Users.classes = call.message.text
                # Users.classes = msg.text
                # classes = db.get_classes_inf(Users.classes)
                # bot.send_message(id(classes), "–ü—Ä–∏–Ω—è—Ç–æ")
                # print("correct_classes")
                # itm = db.get_classes_inf(Users.classes)
                # print(Users.classes)
                # print(itm)
                #if itm == str.lower(classes):
                # if len(itm) > 0:
                #     for q in itm:
                #         s = ' '
                #         for k in q:
                #             s = s + ' + ' + k
                #         s = s + ' + '
                #         bot.send_message(call.message.chat.id, s)
                #         print(q)

            else:
                bot.edit_message_text("–≤—ã—Ö–æ–¥", call.message.chat.id, call.message.message_id, reply_markup=None)

    except:
        pass


def send_welcome(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è üë¶")
    bot.register_next_step_handler(msg, process_firstname_step)


def process_firstname_step(message):
    try:
        Users.name = message.text
        msg = bot.send_message(message.chat.id, "–§–∞–º–∏–ª–∏—é:")
        bot.register_next_step_handler(msg, process_lastname_step)
    except Exception as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏")


def process_lastname_step(message):
    try:
        Users.surname = message.text
        print(Users.surname)
        msg = bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω:")
        bot.register_next_step_handler(msg, process_phone_step)
    except Exception as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏")


def process_phone_step(message):
    try:
        user_id = message.from_user.id
        print(user_id)
        Users.phone = message.text
        print(Users.phone)
        # db.db_table_name(user_id, Users.name, Users.surname, Users.phone )
        msg = bot.send_message(message.chat.id, "–ó–∞–Ω—è—Ç–∏–µ:")
        bot.register_next_step_handler(msg, process_classes_step)
    except Exception as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


def process_classes_step(message):
    try:
        user_id = message.from_user.id
        print(user_id)
        Users.classes = message.text
        print(Users.classes)
        db.db_table_name(user_id, Users.name, Users.surname, Users.phone, Users.classes)
        bot.send_message(user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–Ω—è—Ç–∏—è")

# def process_classes_step(message):
#     try:
#         user_id = message.from_user.id
#         Users.classes = message.text
#         db.get_classes_inf(Users.classes)
#         bot.send_message(user_id, "–ü—Ä–∏–Ω—è—Ç–æ")
#     except Exception as e:
#         bot.reply_to(message, "–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∞")


@bot.message_handler(content_types=['text'])
def handler_chat(message):
            user_id = message.from_user.id
            Users.classes = message.text
            print(message.text)
            exists = db.get_classes_inf(Users.classes)
            print(exists)
            text = "–ó–∞–ø–∏—Å–∞–Ω" if exists else "–ù–µ –∑–∞–ø–∏—Å–∞–Ω"
            bot.send_message(user_id, text)
            #if exists == True:
            if exists == [1]:
                print("–î–∞")
                data2 = db.get_all_classes(Users.classes)
                print(data2)
                chat_id = message.chat.id
                bot.send_message(chat_id, '\n'.join(map(str, data2)))


# RUN
# bot.polling(none_stop=True)

def main():
    bot.polling(none_stop=True)
    db.setup()


if __name__ == '__main__':
    main()
