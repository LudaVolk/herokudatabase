import telebot
from telebot import types
from dbhelper import DBHelper
import re
from config import bottoken

bot = telebot.TeleBot(bottoken)

db = DBHelper()
user_data = {}


class Users:
    name: str
    surname: str
    phone: []
    classes: str

    def __init__(self, name, surname, phone, classes):
        self.name = name
        self.surname = surname
        self.phone = phone
        self.classes = classes

        db.db_table_name(name, surname, phone, classes)


@bot.message_handler(commands=['start'])
def welcome(message):
    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üèÉ–ü–∏–ª–∞—Ç–µ—Å Bok")
    item2 = types.KeyboardButton("üíª–ö—É—Ä—Å—ã BelHard")
    item3 = types.KeyboardButton("üìó–ö–ª—É–± Book club")
    item4 = types.KeyboardButton("‚òò–ë–∞–Ω—è")
    item5 = types.KeyboardButton("‚òï–ö–æ—Ñe c –¥—Ä—É–∑—å—è–º–∏")
    item6 = types.KeyboardButton("üè†–î–∞—á–∞")
    item7 = types.KeyboardButton("–ë–∞–∑–∞ –∫—É—Ä—Å–æ–≤ –∏ –∑–∞–Ω—è—Ç–∏–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–ºüîà")
    item8 = types.KeyboardButton("üëã–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–∑–µ–π \n –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π")

    markup.add(item1, item2, item3, item4, item5, item6, item7, item8)

    bot.send_message(message.chat.id,
                     "Hi, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç-–î–Ω–µ–≤–Ω–∏–∫ –∑–∞–Ω—è—Ç–∏–π VL, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è ‚úåÔ∏èü§© !!!".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def lalala(message, db=DBHelper()):
    text = message.text.lower()
    print(text)
    if text in ['–ø—Ä–∏–≤–µ—Ç', 'hi', 'hello', '—Ö–∞–π', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ']:
        bot.send_message(message.chat.id, ' üôÇ –ü—Ä–∏–≤–µ—Ç! –í–∞—à–µ –∏–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —è –≤–∞–º –æ—Ç–ø–∏—à—É—Å—å!')

        us_id = message.from_user.id
        us_name = message.from_user.first_name
        us_surname = message.from_user.last_name
        username = message.from_user.username

        db.db_table_val(us_id, us_name, us_surname, username)


    elif message.chat.type == 'private':
        if message.text == 'üèÉ–ü–∏–ª–∞—Ç–µ—Å Bok':
            bot.send_message(message.chat.id, '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —Å—Ä–µ–¥–∞ –≤ 19:00')
        if message.text == 'üíª–ö—É—Ä—Å—ã BelHard':
            bot.send_message(message.chat.id, '–í—Ç–æ—Ä–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥ –≤ 18:30')
        if message.text == 'üìó–ö–ª—É–± Book club':
            bot.send_message(message.chat.id, u'–ö–∞–∂–¥—É—é –≤—Ç–æ—Ä—É—é —Å—Ä–µ–¥—É –º–µ—Å—è—Ü–∞ –≤ 20:30')
        if message.text == '‚òò–ë–∞–Ω—è':
            bot.send_message(message.chat.id, '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –º–µ—Å—è—Ü–∞ –≤ 12:00')
        if message.text == '‚òï–ö–æ—Ñe c –¥—Ä—É–∑—å—è–º–∏':
            bot.send_message(message.chat.id, '–ü—è—Ç–Ω–∏—Ü–∞ –≤ 18:00')
        if message.text == 'üè†–î–∞—á–∞':
            bot.send_message(message.chat.id, '–î–∞—á–∞ –≤ —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –≤—Ä–µ–º—è –¥–æ–≥–æ–≤–æ—Ä–Ω–æ–µ')
        if message.text == '–ë–∞–∑–∞ –∫—É—Ä—Å–æ–≤ –∏ –∑–∞–Ω—è—Ç–∏–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–ºüîà':
            bot.send_message(message.chat.id,
                             u'–ö—É—Ä—Å—ã –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –Ω–∞ –º–∞–π, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å! \n üèÉ–ü–∏–ª–∞—Ç–µ—Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —Å—Ä–µ–¥–∞ –≤ 19:00 \n üíª –ö—É—Ä—Å—ã Belhard –≤—Ç–æ—Ä–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥ –≤ 18:30 \n üìó –ö–ª—É–± Book club 2-—è —Å—Ä–µ–¥–∞ –≤ 20:30 \n ‚òï–ö–æ—Ñ–µ –ø—è—Ç–Ω–∏—Ü–∞ –≤ 18:00 \n üè† –î–∞—á–∞ —Å—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤—Ä–µ–º—è –¥–æ–≥–æ–≤–æ—Ä–Ω–æ–µ (–∫ —Ç—è–∂–∫–æ–º—É —Ç—Ä—É–¥—É –ø—Ä–∏–ª–∞–≥–∞—é—Ç—Å—è —à–∞—à–ª—ã–∫–∏üçóüçñ) \n ‚òò–ë–∞–Ω—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –º–µ—Å—è—Ü–∞ –≤ 12:00')
        elif message.text == 'üëã–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–∑–µ–π \n –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π':
            markup = types.InlineKeyboardMarkup(row_width=1)
            item1 = types.InlineKeyboardButton("–ê–≤—Ç–æ–≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–ª–µ–≥–∏", callback_data='good')
            item21 = types.InlineKeyboardButton("–ó–∞–ø–∏—à–∏—Ç–µ—Å—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —É–∫–∞–∂–∏—Ç–µ –∫—É–¥–∞", callback_data='bad')
            item22 = types.InlineKeyboardButton("‚ùì–í—ã–≤–µ—Å—Ç–∏ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫, –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ? –ù–∞–∂–º–∏ –Ω–∏–∂–µ ‚¨á", callback_data='classes')
            item23 = types.InlineKeyboardButton("–≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–≤–µ–¥–µ—Ç –≤—Å–µ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º", callback_data='chat_id')
            item3 = types.InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data='exit')
            # if message.text == '–í—ã—Ö–æ–¥':
            #     bot.send_message(message.chat.id, '–í—Å–µ–º —Å–ø–∞—Å–∏–±–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–≤–æ–Ω—é!!!')
            markup.add(item1, item21, item22, item23, item3)
            bot.send_message(message.chat.id, "–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π üí™ \n  üî´ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏  ‚Üô ‚Üò  —Ä—É—á–∫–∞–º–∏ üñê", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π—Ç–µ –±–æ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
            elif call.data == 'bad':
                msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è')
                bot.register_next_step_handler(msg, process_firstname_step)
            elif call.data == 'chat_id':
                msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ')
                bot.register_next_step_handler(msg, handler_chat)
            elif call.data == 'classes':
                print("classes")
                itemst = db.get_items()
                print(itemst)
                if len(itemst) > 0:
                    for j in itemst:
                        s = ''
                        for k in j:
                            s = s + '  üëâ   ' + k
                        s = s + '    '
                        bot.send_message(call.message.chat.id, s)
                        print(j)
            else:
                bot.edit_message_text("–í—Å–µ–º —Å–ø–∞—Å–∏–±–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–≤–æ–Ω—é!!!", call.message.chat.id, call.message.message_id, reply_markup=None)

    except:
        pass


def send_welcome(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è üë¶")
    bot.register_next_step_handler(msg, process_firstname_step)


def process_firstname_step(message):
    try:
        Users.name = message.text
        msg = bot.send_message(message.chat.id, "–§–∞–º–∏–ª–∏—é:")
        bot.register_next_step_handler(msg, process_lastname_step)
    except Exception as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏")


def process_lastname_step(message):
    try:
        Users.surname = message.text
        print(Users.surname)
        msg = bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω:")
        bot.register_next_step_handler(msg, process_phone_step)
    except Exception as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏")


def process_phone_step(message):
    user_id = message.from_user.id
    while True:
        Users.phone = message.text
        if re.match(r'[0-9@#$%^&+=]{1,}', Users.phone):
           break
        else:
            bot.reply_to(message, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            send_welcome(message)
            return

    msg = bot.send_message(message.chat.id, "–ó–∞–Ω—è—Ç–∏–µ:")
    bot.register_next_step_handler(msg, process_classes_step)


def process_classes_step(message):
    try:
        user_id = message.from_user.id
        print(user_id)

        Users.classes = message.text
        Users.name = str.lower(Users.name)
        Users.surname = str.lower(Users.surname)
        Users.phone = str(Users.phone)
        print(Users.phone)

        Users.classes = str.lower(Users.classes)

        print(Users.classes)
        db.db_table_name(user_id, Users.name, Users.surname, Users.phone, Users.classes)
        bot.send_message(user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as ex:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–Ω—è—Ç–∏—è")

@bot.message_handler(content_types=['text'])
def handler_chat(message):
            user_id = message.from_user.id
            Users.classes = str.lower(message.text)
            print(str(message.text))
            data2 = db.get_all_classes(Users.classes)
            print(data2)
            chat_id = message.chat.id
            bot.send_message(chat_id, '\n'.join(map(str, data2)))


# RUN
# bot.polling(none_stop=True)

def main():
    bot.polling(none_stop=True)
    db.setup()


if __name__ == '__main__':
    main()
